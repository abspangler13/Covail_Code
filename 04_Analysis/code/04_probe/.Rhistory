scale_x_discrete(limits = c("Day 0", "Day 15", "Day 90", "Day 180"))+
theme_bw()+
theme(axis.text.x=element_text(size=12, angle = 90,  hjust = 0.95, vjust = 0.2), axis.text.y=element_text(size=12),
strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01, "cm"))
dev.off()
pdf(file = here::here("04_Analysis", "plots", "06_repertoire_analysis", "GroupedStackedBarplot_VHUsageByGroup_OverTime_OmicronPrototypePositive_Merged.pdf"))
ggplot(metadata[metadata$adj.ProtoOmi == "Proto+Omi+",], aes(fill=VHGene, y=1, x=Timepoint, color=VHGene))+
geom_bar(position="fill",stat="identity")+
ylab("Proportion of RBD+ Cells")+
xlab("Timepoint and Booster Group")+
facet_grid(~ MergedBooster, switch = "x")+ #factor(Timepoint, levels = c("Day 0", "Day 15", "Day 90", "Day 180"))
ggtitle("Probe-Positive Populations Over Time, Cross-Reactive Cells")+
scale_x_discrete(limits = c("Day 0", "Day 15", "Day 90", "Day 180"))+
theme_bw()+
theme(axis.text.x=element_text(size=12, angle = 90,  hjust = 0.95, vjust = 0.2), axis.text.y=element_text(size=12),
strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01, "cm"))
dev.off()
#####Look at clonality per individual over time for each group
stats <- metadata[metadata$adj.ProtoOmi != "Proto-Omi-",] %>%
group_by(Booster, Subject, Timepoint, clone_subject_id) %>%
summarise(n = n()) %>%
mutate(MoreThanTwo = ifelse(n >=2, n, 0),
ProportionClonal = sum(MoreThanTwo) / sum(n))
pdf(file = here::here("04_Analysis", "plots", "06_repertoire_analysis", "ClonalityProportionByGroup_Overall.pdf"), width=10, height=7)
ggplot(stats, aes(x=Timepoint, y=ProportionClonal))+
geom_point(aes(fill = Booster), shape=21, position= position_dodge(width=1))+
stat_summary(fun = mean,
geom = "errorbar",
aes(ymax = ..y.., ymin=..y.., color = Booster),
position = position_dodge(width = 1))+
scale_x_discrete(limits = c("Day 0", "Day 15", "Day 90", "Day 180"))+
# scale_fill_manual(values=c(factor1Color, factor2Color))+
# scale_color_manual(values=c(factor1Color, factor2Color))+
facet_grid(~ Booster)+
xlab("Timepoint")+
ylab("Proportion Total RBD+ Belonging to a Clonal Group")+
ggtitle("Clonal Proportion of Total RBD+ Cells")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size=7), axis.text.y = element_text(size=9))
dev.off()
#proto only
stats <- metadata[metadata$adj.ProtoOmi == "Proto+Omi-",] %>%
group_by(Booster, Subject, Timepoint, clone_subject_id) %>%
summarise(n = n()) %>%
mutate(MoreThanTwo = ifelse(n >=2, n, 0),
ProportionClonal = sum(MoreThanTwo) / sum(n))
pdf(file = here::here("04_Analysis", "plots", "06_repertoire_analysis", "ClonalityProportionByGroup_ProtoOnly.pdf"), width=10, height=7)
ggplot(stats, aes(x=Timepoint, y=ProportionClonal))+
geom_point(aes(fill = Booster), shape=21, position= position_dodge(width=1))+
stat_summary(fun = mean,
geom = "errorbar",
aes(ymax = ..y.., ymin=..y.., color = Booster),
position = position_dodge(width = 1))+
scale_x_discrete(limits = c("Day 0", "Day 15", "Day 90", "Day 180"))+
# scale_fill_manual(values=c(factor1Color, factor2Color))+
# scale_color_manual(values=c(factor1Color, factor2Color))+
facet_grid(~ Booster)+
xlab("Timepoint")+
ylab("Proportion Prototype+ Belonging to a Clonal Group")+
ggtitle("Clonal Proportion of Prototype+/Omicron- Cells")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size=7), axis.text.y = element_text(size=9))
dev.off()
#omi only
stats <- metadata[metadata$adj.ProtoOmi == "Proto-Omi+",] %>%
group_by(Booster, Subject, Timepoint, clone_subject_id) %>%
summarise(n = n()) %>%
mutate(MoreThanTwo = ifelse(n >=2, n, 0),
ProportionClonal = sum(MoreThanTwo) / sum(n))
pdf(file = here::here("04_Analysis", "plots", "06_repertoire_analysis", "ClonalityProportionByGroup_OmicronOnly.pdf"), width=10, height=7)
ggplot(stats, aes(x=Timepoint, y=ProportionClonal))+
geom_point(aes(fill = Booster), shape=21, position= position_dodge(width=1))+
stat_summary(fun = mean,
geom = "errorbar",
aes(ymax = ..y.., ymin=..y.., color = Booster),
position = position_dodge(width = 1))+
scale_x_discrete(limits = c("Day 0", "Day 15", "Day 90", "Day 180"))+
# scale_fill_manual(values=c(factor1Color, factor2Color))+
# scale_color_manual(values=c(factor1Color, factor2Color))+
facet_grid(~ Booster)+
xlab("Timepoint")+
ylab("Proportion Omicron+ Belonging to a Clonal Group")+
ggtitle("Clonal Proportion of Prototype-/Omicron+ Cells")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size=7), axis.text.y = element_text(size=9))
dev.off()
#finally, cross reactive only
stats <- metadata[metadata$adj.ProtoOmi == "Proto+Omi+",] %>%
group_by(Booster, Subject, Timepoint, clone_subject_id) %>%
summarise(n = n()) %>%
mutate(MoreThanTwo = ifelse(n >=2, n, 0),
ProportionClonal = sum(MoreThanTwo) / sum(n))
pdf(file = here::here("04_Analysis", "plots", "06_repertoire_analysis", "ClonalityProportionByGroup_CrossReactiveOnly.pdf"), width=10, height=7)
ggplot(stats, aes(x=Timepoint, y=ProportionClonal))+
geom_point(aes(fill = Booster), shape=21, position= position_dodge(width=1))+
stat_summary(fun = mean,
geom = "errorbar",
aes(ymax = ..y.., ymin=..y.., color = Booster),
position = position_dodge(width = 1))+
scale_x_discrete(limits = c("Day 0", "Day 15", "Day 90", "Day 180"))+
# scale_fill_manual(values=c(factor1Color, factor2Color))+
# scale_color_manual(values=c(factor1Color, factor2Color))+
facet_grid(~ Booster)+
xlab("Timepoint")+
ylab("Proportion Cross-Reactive Belonging to a Clonal Group")+
ggtitle("Clonal Proportion of Cross-Reactive Cells")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size=7), axis.text.y = element_text(size=9))
dev.off()
library(Seurat)
library(sessioninfo)
library(harmony)
library(tidyseurat)
library(tidyverse)
library(ggridges)
library(here)
#set a seed for reproducibility when running on locus
set.seed(1)
print("R Version:")
print(R.version)
###################################### Clustering based on Prot and RNA transcripts #################################
sObj <- readRDS(file = here::here("04_Analysis","data_objects","04_probe","CoVSeuratObj_VDJCSOGEX_SpecificitiesLabelled_CloneCorrected.rds"))
## Cluster on only RBD+ B-cells
rbdPos <- sObj %>% filter(adj.Population != "RBD-")
## Did clustering in integration script, but will re-do it here because we dropped junk cells in 04_HA. Also want to drop HA- cells before clustering
DefaultAssay(rbdPos) <- "RNA"
rbdPos <- NormalizeData(rbdPos, normalization.method = "LogNormalize")
rbdPos <- FindVariableFeatures(rbdPos, selection.method = "vst", nfeatures = 600)
VariableFeatures(rbdPos) <- grep("IG[HKL]V|TRBV", VariableFeatures(rbdPos), invert = TRUE, value = TRUE)
rbdPos <- ScaleData(rbdPos)
rbdPos <- RunPCA(rbdPos, features = VariableFeatures(rbdPos))
rbdPos <- RunHarmony(rbdPos, group.by.vars = "orig.ident", reduction = "pca", reduction.save = "harmony")
#make umaps of both PCs and harmony corrected PCs
rbdPos <- RunUMAP(rbdPos, reduction = "pca", reduction.name = "rna.umap", dims = 1:30, assay = "RNA") #do I need to change the number of dims based on the elbow plot?
rbdPos <- RunUMAP(rbdPos, reduction = "harmony", reduction.name = "harmony.rna.umap", dims = 1:30, assay = "RNA")
#we do have demultiplexed subject data, but our sequencing data was done
#by date of sort
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_rna_UMAP_RBDPositive.pdf"))
VariableFeaturePlot(rbdPos)
ElbowPlot(rbdPos)
DimPlot(rbdPos, reduction = "rna.umap",group.by = "Subject")
DimPlot(rbdPos, reduction = "harmony.rna.umap",group.by = "Subject")
# DimPlot(rbdPos, reduction = "rna.umap",group.by = "run") #we don't have a run date- the run date is basically orig.ident
# DimPlot(rbdPos, reduction = "harmony.rna.umap",group.by = "run")
DimPlot(rbdPos, reduction = "rna.umap", label = TRUE) #consider removing label=TRUE because it gets in the way of the plot
DimPlot(rbdPos, reduction = "rna.umap", label = TRUE, group.by = "orig.ident")
DimPlot(rbdPos, reduction = "harmony.rna.umap", label = TRUE, group.by = "orig.ident")
DimPlot(rbdPos, reduction = "rna.umap", group.by = "Subject", split.by = "Subject", ncol = 4)
dev.off()
# Run on Prot individually #
DefaultAssay(rbdPos) <- "Prot"
ProtFeatures <- rownames(rbdPos@assays$Prot@data)
#VariableProtFeatures <- ProtFeatures[- c(47, 48, 53, 56, 58)] #not totally sure why these were removed (or what prots these were)
VariableProtFeatures <- ProtFeatures
rbdPos <- ScaleData(rbdPos, features = VariableProtFeatures)
rbdPos <- RunPCA(rbdPos, assay = "Prot", slot = "data", features = rownames(rbdPos), reduction.name = "apca")
rbdPos <- RunHarmony(rbdPos, group.by.vars = "orig.ident", reduction = "apca", reduction.save = "harmony.prot")
#make umaps of both PCs and harmony corrected PCs - do we need to change the number of dimensions?
rbdPos <- RunUMAP(rbdPos, reduction = "apca", dims = 1:18, assay = "Prot", reduction.name = "prot.umap", reduction.key = "protUMAP_", n.neighbors = 40, min.dist = 0.3, local.connectivity = 3, spread = 3)
rbdPos <- RunUMAP(rbdPos, reduction = "harmony.prot", dims = 1:18, assay = "Prot", reduction.name = "harmony.prot.umap", reduction.key = "har_protUMAP_", n.neighbors = 40, min.dist = 0.3, local.connectivity = 3, spread = 3)
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_prot_UMAP.pdf"))
ElbowPlot(rbdPos)
DimPlot(rbdPos, reduction = "prot.umap",group.by = "Subject")
DimPlot(rbdPos, reduction = "harmony.prot.umap",group.by = "Subject")
# DimPlot(rbdPos, reduction = "prot.umap",group.by = "run")
# DimPlot(rbdPos, reduction = "harmony.prot.umap",group.by = "run")
DimPlot(rbdPos, reduction = "prot.umap", group.by = "orig.ident")
DimPlot(rbdPos, reduction = "harmony.prot.umap", group.by = "orig.ident")
DimPlot(rbdPos, reduction = "harmony.prot.umap", ncol=4, group.by = "Subject", split.by = "Subject")
dev.off()
# Do multi-modal clustering
rbdPos <- FindMultiModalNeighbors(rbdPos, reduction.list = list("harmony", "harmony.prot"), dims.list = list(1:15, 1:18), modality.weight.name = "harmony.weight", snn.graph.name = "harmony.snn", knn.graph.name = "harmony.knn", weighted.nn.name = "harmony.weighted.wnn")
rbdPos <- FindClusters(rbdPos, graph.name = "harmony.snn", algorithm = 3, resolution = 0.4, verbose = FALSE)
rbdPos <- RunUMAP(rbdPos, nn.name = "harmony.weighted.wnn", reduction.name = "harmony.wnn.umap", reduction.key = "harmony.wnnUMAP_", n.neighbors = 40, min.dist = 0.3, local.connectivity = 3, spread = 3)
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_UMAP.pdf"))
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", label = TRUE) + theme(aspect.ratio = 1)
# DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "broad.celltype", label = TRUE)
# DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "run", split.by = "run", ncol = 2)
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "orig.ident")
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "Subject")
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "Subject", split.by = "Subject", ncol = 4)
dev.off()
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_UMAP_clustering.pdf"))
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", label = TRUE)
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4")
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", split.by = "Subject", ncol = 4)
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", split.by = "orig.ident", ncol = 2)
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", split.by = "Booster", ncol = 4)
DimPlot(rbdPos, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", split.by = "Infection", ncol = 4)
dev.off()
table(rbdPos$harmony.snn_res.0.4)
saveRDS(rbdPos, file = here::here("04_Analysis","data_objects","05_clustering","COVAIL_ClusteredSeuratObject.rds"))
# look at diff exp protein markers all clusters with res 0.4 #
Prot <- data.frame(t(as.matrix(rbdPos@assays$Prot@data)))
Prot$CELL <- rownames(Prot)
head(Prot)
meta <- rbdPos@meta.data[, c("CELL", "harmony.snn_res.0.4", "Population", "Timepoint", "Subject", "c_call")]
Prot.meta <- left_join(Prot, meta, by = "CELL")
############# DSb analysis PDF #############
dsb.analysis <- Prot.meta[,c(1:59)] %>% filter(!(harmony.snn_res.0.4 %in% c("13")))
Proteins <- colnames(dsb.analysis)[1:53]
dsb.plot.list <- list()
pdf(file = here::here("04_Analysis","plots","05_clustering","Protein_ridge_plots_before.pdf"))
for ( i in 1:length(Proteins)) {
dsb.plot.list[[i]] <- dsb.analysis %>%
ggplot(aes_string(x = Proteins[i], y = "harmony.snn_res.0.4")) +
geom_density_ridges(alpha = 0.6) +
theme_classic()
plot(dsb.plot.list[[i]])
}
dev.off()
##Based on the data from steps 1 and 2- I ran step 1 locally because Locus is giving me consistent issues in
#separating cluster 7 from cluster 4 in the good data (i.e. my local PC separates cluster 7, but Locus
#is combining the two- I think this is an issue with the version of R available on Locus- I'm going to see
#if I can update it)
#8 expresses a lot of cd14 and has weird statuses on other markes
#11 has a lot of CD4 and CD14, 12 has a bit of CD3 and CD4
#10 has really high HLA, which Sarah mentioned could be a monocyte population
#7 is the naive cluster
#setting a cutoff for CD3 and CD4 that might remove some of the cluster 11 ickiness
print("Removing the following clusters: 8, 9 (reconsider this one), 10, 11, 12")
rbdPos.G <- rbdPos %>% filter(!(harmony.snn_res.0.4 %in% c("8", "9", "10", "11", "12")))
## Re-do clustering with just memory cells
DefaultAssay(rbdPos.G) <- "RNA"
rbdPos.G <- NormalizeData(rbdPos.G, normalization.method = "LogNormalize")
rbdPos.G <- FindVariableFeatures(rbdPos.G, selection.method = "vst", nfeatures = 600)
VariableFeatures(rbdPos.G) <- grep("IG[HKL]V|TRBV", VariableFeatures(rbdPos.G), invert = TRUE, value = TRUE)
rbdPos.G <- ScaleData(rbdPos.G)
rbdPos.G <- RunPCA(rbdPos.G, features = VariableFeatures(rbdPos.G))
rbdPos.G <- RunHarmony(rbdPos.G, group.by.vars = "orig.ident", reduction = "pca", reduction.save = "harmony")
rbdPos.G <- RunUMAP(rbdPos.G, reduction = "pca", reduction.name = "rna.umap", dims = 1:30, assay = "RNA")
rbdPos.G <- RunUMAP(rbdPos.G, reduction = "harmony", reduction.name = "harmony.rna.umap", dims = 1:30, assay = "RNA")
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_rna_UMAP_G.pdf"))
VariableFeaturePlot(rbdPos.G)
ElbowPlot(rbdPos.G)
DimPlot(rbdPos.G, reduction = "rna.umap",group.by = "Subject")
DimPlot(rbdPos.G, reduction = "harmony.rna.umap",group.by = "Subject")
# DimPlot(rbdPos.G, reduction = "rna.umap",group.by = "run")
# DimPlot(rbdPos.G, reduction = "harmony.rna.umap",group.by = "run")
DimPlot(rbdPos.G, reduction = "rna.umap", label = TRUE)
DimPlot(rbdPos.G, reduction = "rna.umap", label = TRUE, group.by = "orig.ident")
DimPlot(rbdPos.G, reduction = "harmony.rna.umap", label = TRUE, group.by = "orig.ident")
DimPlot(rbdPos.G, reduction = "rna.umap", group.by = "Subject", split.by = "Subject", ncol = 4)
DimPlot(rbdPos.G, reduction = "harmony.rna.umap", group.by = "Subject", split.by = "Subject", ncol = 4)
dev.off()
DefaultAssay(rbdPos.G) <- "Prot"
ProtFeatures <- rownames(rbdPos.G@assays$Prot@data)
#VariableProtFeatures <- ProtFeatures[- c(47, 48, 53, 56, 58)]
VariableProtFeatures <- ProtFeatures #Again, not totally sure why we removed some features before- maybe there was an issue with the signal or almost no variability?
rbdPos.G <- ScaleData(rbdPos.G, features = VariableProtFeatures)
rbdPos.G <- RunPCA(rbdPos.G, assay = "Prot", slot = "data", features = rownames(rbdPos.G), reduction.name = "apca")
rbdPos.G <- RunHarmony(rbdPos.G, group.by.vars = "orig.ident", reduction = "apca", reduction.save = "harmony.prot")
#make umaps of both PCs and harmony corrected PCs
rbdPos.G <- RunUMAP(rbdPos.G, reduction = "apca", dims = 1:18, assay = "Prot", reduction.name = "prot.umap", reduction.key = "protUMAP_", n.neighbors = 40, min.dist = 0.3, local.connectivity = 3, spread = 3)
rbdPos.G <- RunUMAP(rbdPos.G, reduction = "harmony.prot", dims = 1:18, assay = "Prot", reduction.name = "harmony.prot.umap", reduction.key = "har_protUMAP_", n.neighbors = 40, min.dist = 0.3, local.connectivity = 3, spread = 3)
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_prot_UMAP_memB_G.pdf"))
ElbowPlot(rbdPos.G)
DimPlot(rbdPos.G, reduction = "prot.umap",group.by = "Subject")
DimPlot(rbdPos.G, reduction = "harmony.prot.umap",group.by = "Subject")
# DimPlot(rbdPos.G, reduction = "prot.umap",group.by = "run")
# DimPlot(rbdPos.G, reduction = "harmony.prot.umap",group.by = "run")
DimPlot(rbdPos.G, reduction = "prot.umap", group.by = "orig.ident")
DimPlot(rbdPos.G, reduction = "harmony.prot.umap", group.by = "orig.ident")
DimPlot(rbdPos.G, reduction = "harmony.prot.umap", ncol=4, group.by = "Subject", split.by = "Subject")
dev.off()
# Combine Prot and RNA clusters #
rbdPos.G <- FindMultiModalNeighbors(rbdPos.G, reduction.list = list("harmony", "harmony.prot"), dims.list = list(1:15, 1:18), modality.weight.name = "harmony.weight", snn.graph.name = "harmony.snn", knn.graph.name = "harmony.knn", weighted.nn.name = "harmony.weighted.wnn")
rbdPos.G <- FindClusters(rbdPos.G, graph.name = "harmony.snn", algorithm = 3, resolution = 0.4, verbose = FALSE)
rbdPos.G <- RunUMAP(rbdPos.G, nn.name = "harmony.weighted.wnn", reduction.name = "harmony.wnn.umap", reduction.key = "harmony.wnnUMAP_", n.neighbors = 40, min.dist = 0.3, local.connectivity = 3, spread = 3)
table(rbdPos.G$harmony.snn_res.0.4)
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_UMAP_G.pdf"))
# DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "broad.celltype", label = TRUE)
# DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "run", split.by = "run", ncol = 2)
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "orig.ident")
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "Subject")
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "Subject", split.by = "Subject", ncol = 4)
dev.off()
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_UMAP_clustering_G.pdf"))
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", label = TRUE) + theme(aspect.ratio = 1)
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", label = TRUE)
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4")
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", split.by = "Subject", ncol = 4)
DimPlot(rbdPos.G, reduction = "harmony.wnn.umap", group.by = "harmony.snn_res.0.4", split.by = "orig.ident", ncol = 2)
dev.off()
#Seurat is being weird about the legend, so I'll edit it myself by readding cell embeddings
metadata <- rbdPos.G@meta.data
metadata <- cbind(metadata, rbdPos.G@reductions$harmony.wnn.umap@cell.embeddings)
metadata$Timepoint <- factor(metadata$Timepoint, levels = c("Day 0", "Day 15", "Day 90", "Day 180"))
pdf(file = here::here("04_Analysis","plots","05_clustering","DimPlot_UMAP_clustering_G_OverTime.pdf"), width = 15, height=4)
ggplot(metadata[metadata$Infection == "N",], aes(x=harmonywnnUMAP_1, y=harmonywnnUMAP_2))+
geom_point(aes(color= seurat_clusters, fill=seurat_clusters), size=0.3)+
ggtitle("UMAP Clustering Over Time")+
facet_grid(cols = vars(Timepoint))+
theme_classic()+
guides(color = guide_legend(override.aes = list(size=3)))
dev.off()
#####
saveRDS(rbdPos.G, file = here::here("04_Analysis","data_objects","05_clustering","COVAIL_ClusteredSeuObj_CleanedAndReclustered.rds"))
#create an after version of the protein plots
# look at diff exp protein markers all clusters with res 0.4 #
Prot <- data.frame(t(as.matrix(rbdPos.G@assays$Prot@data)))
Prot$CELL <- rownames(Prot)
head(Prot)
meta <- rbdPos.G@meta.data[, c("CELL", "harmony.snn_res.0.4", "Population", "Timepoint", "Subject", "c_call")]
Prot.meta <- left_join(Prot, meta, by = "CELL")
############# DSb analysis PDF #############
dsb.analysis <- Prot.meta[,c(1:59)] %>% filter(!(harmony.snn_res.0.4 %in% c("13")))
Proteins <- colnames(dsb.analysis)[1:53]
dsb.plot.list <- list()
pdf(file = here::here("04_Analysis","plots","05_clustering","Protein_ridge_plots_aftercleaning.pdf"))
for ( i in 1:length(Proteins)) {
dsb.plot.list[[i]] <- dsb.analysis %>%
ggplot(aes_string(x = Proteins[i], y = "harmony.snn_res.0.4")) +
geom_density_ridges(alpha = 0.6) +
theme_classic()
plot(dsb.plot.list[[i]])
}
dev.off()
print("Reproducibility information:")
Sys.time()
proc.time()
options(width = 120)
session_info()
library(Seurat)
library(tidyseurat)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(here)
library(stringr)
#load gateR-corrected csv file
gateRData <- read.csv(here::here("04_Analysis", "data_objects", "04_probe", "gateRCorrected_Specificity.csv"))
#colnames(gateRData) <. str_replace_all(colnames(gateRData), "/.", "/.")
#define the populations post.gateR correction
gateRData$Population <- case_when((gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+/BA1+/XBB+",
(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+/BA1+",
(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/BA1+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+/BA1+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+/BA1+",
!(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+",
!(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "BA1+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "BA1+",
(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/BA1+/XBB+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+/XBB+",
TRUE ~ "RBD-")
gateRData$ProtoBA1 <- case_when(gateRData$Proto.RBD.PE_Positive & gateRData$BA1.RBD.PE_Positive ~ "Proto+BA1+",
!gateRData$Proto.RBD.PE_Positive & gateRData$BA1.RBD.PE_Positive ~ "Proto-BA1+",
gateRData$Proto.RBD.PE_Positive & !gateRData$BA1.RBD.PE_Positive ~ "Proto+BA1-",
TRUE ~ "Proto-BA1-")
#combine the m'crons
gateRData$ProtoOmi <- case_when(gateRData$Proto.RBD.PE_Positive & (gateRData$BA1.RBD.PE_Positive | gateRData$XBB.RBD.no.fluor_Positive) ~ "Proto+Omi+",
!gateRData$Proto.RBD.PE_Positive & (gateRData$BA1.RBD.PE_Positive | gateRData$XBB.RBD.no.fluor_Positive) ~ "Proto-Omi+",
gateRData$Proto.RBD.PE_Positive & !(gateRData$BA1.RBD.PE_Positive | gateRData$XBB.RBD.no.fluor_Positive) ~ "Proto+Omi-",
TRUE ~ "Proto-Omi-")
#define the populations post.gateR correction
gateRData$Population <- case_when((gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+/BA1+/XBB+",
(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+/BA1+",
(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/BA1+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+/BA1+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+/BA1+",
!(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+",
!(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Beta+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "BA1+/XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "XBB+",
!(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & !gateRData$`XBB.RBD.no.fluor_Positive` ~ "BA1+",
(gateRData$`Proto.RBD.PE_Positive`) & (gateRData$`BA1.RBD.PE_Positive`) & !(gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/BA1+/XBB+",
(gateRData$`Proto.RBD.PE_Positive`) & !(gateRData$`BA1.RBD.PE_Positive`) & (gateRData$`Beta.RBD.no.fluor_Positive`) & gateRData$`XBB.RBD.no.fluor_Positive` ~ "Proto+/Beta+/XBB+",
TRUE ~ "RBD-")
gateRData$ProtoBA1 <- case_when(gateRData$Proto.RBD.PE_Positive & gateRData$BA1.RBD.PE_Positive ~ "Proto+BA1+",
!gateRData$Proto.RBD.PE_Positive & gateRData$BA1.RBD.PE_Positive ~ "Proto-BA1+",
gateRData$Proto.RBD.PE_Positive & !gateRData$BA1.RBD.PE_Positive ~ "Proto+BA1-",
TRUE ~ "Proto-BA1-")
pdf(file = here::here("04_Analysis", "plots", "04_probe", "gateRCorrected_ProtoBA1PopulationProportions_BeforeMergingBA1AndXBB.pdf"))
ggplot(gateRData[gateRData$ProtoBA1 != "Proto-BA1-",], aes(fill=ProtoBA1, y=1, x=Booster, color=ProtoBA1))+
geom_bar(position="fill",stat="identity")+
ylab("Percentage of Booster Proto/BA1 Populations")+
xlab("Booster")+
ggtitle("Probe+ Proportions per Booster - Before Combining Omicron")+
theme_bw()+
theme(axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
dev.off()
#combine the m'crons
gateRData$ProtoOmi <- case_when(gateRData$Proto.RBD.PE_Positive & (gateRData$BA1.RBD.PE_Positive | gateRData$XBB.RBD.no.fluor_Positive) ~ "Proto+Omi+",
!gateRData$Proto.RBD.PE_Positive & (gateRData$BA1.RBD.PE_Positive | gateRData$XBB.RBD.no.fluor_Positive) ~ "Proto-Omi+",
gateRData$Proto.RBD.PE_Positive & !(gateRData$BA1.RBD.PE_Positive | gateRData$XBB.RBD.no.fluor_Positive) ~ "Proto+Omi-",
TRUE ~ "Proto-Omi-")
pdf(file = here::here("04_Analysis", "plots", "04_probe", "gateRCorrected_ProtoOmicronPopulationProportions_AfterMergingBA1AndXBB.pdf"))
ggplot(gateRData[gateRData$ProtoOmi != "Proto-Omi-",], aes(fill=ProtoOmi, y=1, x=Booster, color=ProtoOmi))+
geom_bar(position="fill",stat="identity")+
ylab("Percentage of Booster Proto/Omicron Populations")+
xlab("Booster")+
ggtitle("Probe+ Proportions per Booster - After Combining Omicron")+
theme_bw()+
theme(axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
dev.off()
#let's make a plot that shows where the populations lie
pdf(file = here::here("04_Analysis", "plots", "04_probe", "gateRCorrectedData_ProtoBA1_BA1XBBMergedLabelledScatterplot.pdf"))
ggplot(gateRData[gateRData$ProtoOmi != "Proto-Omi-",], aes(y=BA1_RBD_PE, x=Proto_RBD_PE, color=ProtoOmi, fill=ProtoOmi))+
geom_point()+
scale_x_continuous(trans='log2')+
scale_y_continuous(trans='log2')+
ylab("BA1 RBD Counts")+
xlab("Prototype RBD Counts")+
ggtitle("Proto vs BA1 Colored By Population Labelling - gateR Corrected and XBB and BA1 Merged")+
theme_bw()+
theme(axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
dev.off()
pdf(file = here::here("04_Analysis", "plots", "04_probe", "gateRCorrectedData_ProtoXBB_BA1XBBMergedLabelledScatterplot.pdf"))
ggplot(gateRData[gateRData$ProtoOmi != "Proto-Omi-",], aes(y=XBB_RBD_no_fluor, x=Proto_RBD_PE, color=ProtoOmi, fill=ProtoOmi))+
geom_point()+
scale_x_continuous(trans='log2')+
scale_y_continuous(trans='log2')+
ylab("XBB RBD Counts")+
xlab("Prototype RBD Counts")+
ggtitle("Proto vs XBB Colored By Population Labelling - gateR Corrected and XBB and BA1 Merged")+
theme_bw()+
theme(axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
dev.off()
######merge the new annotations with the seurat object metadata
vdjObj <- readRDS(file = here::here("04_Analysis","data_objects","03_vdj","VDJPlusDSBNSeuratObj_NonVDJRemoved_CloneIDSubjPasted_final_all.rds"))
counts <- vdjObj %>%
tidyseurat::join_features(features = c("Proto-RBD-PE", "BA1-RBD-PE", "XBB-RBD-no-fluor", "Beta-RBD-no-fluor"), assay="Probes") %>%
pivot_wider(names_from=.feature,values_from=.abundance_Probes)
counts <- as.data.frame(counts)
rownames(counts) <- counts$CELL
rownames(gateRData) <- gateRData$CELL
#add in HTO signal data
#set old object
oldObj <- vdjObj@meta.data
vdjObj <- AddMetaData(vdjObj, as.data.frame(counts[,colnames(counts) %in% c("Proto-RBD-PE", "BA1-RBD-PE", "XBB-RBD-no-fluor", "Beta-RBD-no-fluor")]))
#add in positivity booleans
vdjObj <- AddMetaData(vdjObj, gateRData[,colnames(gateRData) %in% c("Proto.RBD.PE_Positive","BA1.RBD.PE_Positive", "XBB.RBD.no.fluor_Positive", "Beta.RBD.no.fluor_Positive", "Population", "ProtoBA1", "ProtoOmi")])
#240119: Adding back in CD20 to the prot data brought in new cells not present before, and by gating they all look cross reactive, so I will label them as such here
#In the future, we might want to fix this more formally by gating again in gateR, but for now, it's not worth tinkering too much with the gating
#if there are any notes manually added via gateR, then add them in
if("notes" %in% colnames(gateRData)){
vdjObj <- AddMetaData(vdjObj, gateRData[,colnames(gateRData) %in% c("notes")])
}
write.csv(vdjObj@meta.data, file=here::here("04_Analysis", "data_objects", "04_probe", "COVAILVDJAndCSOData_SpecificitiesLabelled_ClonesNotCorrected.csv"))
#########Set the clonal group's specificity so that it is the same for all of them
#start with general population labels
vdjObj$CloneSubjectIDTimepoint <- paste0(vdjObj$clone_subject_id, "_", vdjObj$Timepoint)
vdjDF <- vdjObj@meta.data
adj.spec.P <- as.data.frame(vdjDF %>%
group_by(clone_subject_id,Population) %>%
dplyr::summarise(Freq = n()) %>%
pivot_wider(names_from = Population, values_from = Freq) %>%
replace(is.na(.),0))
rownames(adj.spec.P) <- adj.spec.P$clone_subject_id #this block takes the summary table and chooses the max label as the clonal specificity
adj.spec.P <- adj.spec.P[,-1]
adj.spec.P$adj.Population<-colnames(adj.spec.P)[apply(adj.spec.P,1,which.max)]
adj.spec.P$clone_subject_id <- rownames(adj.spec.P)
adj.spec.P <- adj.spec.P[,c("adj.Population","clone_subject_id")]
vdjDF <- vdjDF %>% left_join(adj.spec.P,by="clone_subject_id")
#combine with protoomi now
adj.spec.P <- as.data.frame(vdjDF %>%
group_by(clone_subject_id,ProtoOmi) %>%
dplyr::summarise(Freq = n()) %>%
pivot_wider(names_from = ProtoOmi, values_from = Freq) %>%
replace(is.na(.),0))
rownames(adj.spec.P) <- adj.spec.P$clone_subject_id
adj.spec.P <- adj.spec.P[,-1]
adj.spec.P$adj.ProtoOmi<-colnames(adj.spec.P)[apply(adj.spec.P,1,which.max)]
adj.spec.P$clone_subject_id <- rownames(adj.spec.P)
adj.spec.P <- adj.spec.P[,c("adj.ProtoOmi","clone_subject_id")]
vdjDF <- vdjDF %>% left_join(adj.spec.P,by="clone_subject_id")
#Make a second adjusted specificity label that is relative to a timepoint - this will capture potential changes in specificity over time
adj.spec.P <- as.data.frame(vdjDF %>%
group_by(CloneSubjectIDTimepoint,ProtoOmi) %>%
dplyr::summarise(Freq = n()) %>%
pivot_wider(names_from = ProtoOmi, values_from = Freq) %>%
replace(is.na(.),0))
rownames(adj.spec.P) <- adj.spec.P$CloneSubjectIDTimepoint
adj.spec.P <- adj.spec.P[,-1]
adj.spec.P$TimeAdj.ProtoOmi<-colnames(adj.spec.P)[apply(adj.spec.P,1,which.max)]
adj.spec.P$CloneSubjectIDTimepoint <- rownames(adj.spec.P)
adj.spec.P <- adj.spec.P[,c("TimeAdj.ProtoOmi","CloneSubjectIDTimepoint")]
vdjDF <- vdjDF %>% left_join(adj.spec.P,by="CloneSubjectIDTimepoint")
#let's plot the adjusted value proportions
pdf(file = here::here("04_Analysis", "plots", "04_probe", "ClonallyAdjusted_gateRCorrected_ProtoOmicronPopulationProportions_AfterMergingBA1AndXBB.pdf"))
ggplot(vdjDF[vdjDF$adj.ProtoOmi != "Proto-Omi-",], aes(fill=adj.ProtoOmi, y=1, x=Booster, color=adj.ProtoOmi))+
geom_bar(position="fill",stat="identity")+
ylab("Percentage of Booster Proto/Omicron Populations")+
xlab("Booster")+
ggtitle("Probe+ Proportions - Omicrons Combined, Clones Corrected")+
theme_bw()+
theme(axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
dev.off()
#let's see where they sit on the proto-omi plots
pdf(file = here::here("04_Analysis", "plots", "04_probe", "ClonallyAdjusted_gateRCorrectedData_ProtoBA1_BA1XBBMergedLabelledScatterplot.pdf"))
ggplot(vdjDF[vdjDF$adj.ProtoOmi != "Proto-Omi-",], aes(y=BA1.RBD.PE, x=Proto.RBD.PE, color=adj.ProtoOmi, fill=adj.ProtoOmi))+
geom_point()+
scale_x_continuous(trans='log2')+
scale_y_continuous(trans='log2')+
ylab("BA1 RBD Counts")+
xlab("Prototype RBD Counts")+
ggtitle("Proto vs BA1 Colored By Population Labelling - ClonallyCorrected")+
theme_bw()+
theme(axis.text.x=element_text(size=12), axis.text.y=element_text(size=12))
dev.off()
